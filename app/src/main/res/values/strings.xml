<resources>
    <string name="app_name">AppBarLayout</string>
    <string name="toolbar_title">购物车</string>
    <string name="my_txt">
        程序计数器\n
        程序计数器是线程私有的区域，很好理解嘛~，每个线程当然得有个计数器记录当前执行到那个指令。

        占用的内存空间小，可以把它看成是当前线程所执行的字节码的行号指示器。

        如果线程在执行Java方法，这个计数器记录的是正在执行的虚拟机字节码指令地址；如果执行的是Native方法，这个计数器的值为空（Undefined）。

        此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。

        Java虚拟机栈与程序计数器一样，Java虚拟机栈也是线程私有的。其生命周期与线程相同。

        如何理解虚拟机栈呢？本质上来讲，就是个栈。里面存放的元素叫栈帧，栈帧好像很复杂的样子，其实它很简单！它里面存放的是一个函数的上下文，具体存放的是执行的函数的一些数据。
        执行的函数需要的数据无非就是局部变量表（保存函数内部的变量）、操作数栈（执行引擎计算时需要），方法出口等等。
执行引擎每调用一个函数时，就为这个函数创建一个栈帧，并加入虚拟机栈。换个角度理解，每个函数从调用到执行结束，其实是对应一个栈帧的入栈和出栈。
        注意这个区域可能出现的两种异常：一种是StackOverflowError，当前线程请求的栈深度大于虚拟机所允许的深度时，会抛出这个异常。
        制造这种异常很简单：将一个函数反复递归自己，最终会出现栈溢出错误（StackOverflowError）。
        另一种异常是OutOfMemoryError异常，当虚拟机栈可以动态扩展时（当前大部分虚拟机都可以），如果无法申请足够多的内存就会抛出OutOfMemoryError，如何制作虚拟机栈OOM呢，参考一下代码：\n
        忽然间 毫无缘故\n
再多的爱 也不满足\n
想你的眉目 想到迷糊\n
不知不觉让我中毒\n
忽然间 很需要保护\n
假如世界一瞬间结束\n
假如你退出 我只是说假如\n
不是不明白 太想看清楚\n
反而让你的面目变得模糊\n
越在乎的人 越小心安抚 反而连一个吻也留不住\n
我也不想这么样 反反覆覆 反正最后每个人都孤独\n
你的甜蜜变成我的痛苦\n
离开你有没有帮助\n
我也不想这么样 起起伏伏 反正每段关系都是孤独\n
眼看感情变成一个包袱\n
都怪我太渴望得到你的保护
    </string>
</resources>
